package stem.views{	import flash.display.Stage;	import stem.model.*;	import flash.events.*; 		/**	* ...	* @author Robin Petterd	*/	public class View 	{		private var myEvents = new InteractionEvents();				private var model; 		public var target:Stage; 				//the internal states 			public var buildViewState; 			public var InteractionViewState;				//set the current state 			public var state; 			public var changing;					public function View (m, t:Stage) {			//trace("n- just built the view object"); 						model = m; 			target = t; 						//Now build each of states 			buildViewState = new BuildViewState(this); 			//update the our first state and then add that to the stage			state = buildViewState; 			target.addChild(state); 						//now for the main Listeners this is partly because the main interaction model is build 			//after the xml is loaded						model.addEventListener(myEvents.MODEL_STATE_CHANGING, changingViewState); 			model.addEventListener(myEvents.MODEL_STATE_CHANGED,changedViewState); 					}				public function changedViewState(e:Event):void 		{			//trace("n --- the model has just changed state so the view state needs to change ----"); 		}				private function changingViewState(e:Event):void 		{			//trace("here");			//trace("\n ********** about to start changing the View State");						var type:String = model.getMyTypeofChanging(); 					  //trace(type + "is the new type of image"); 						switch(type) { 						case "image" : 				//trace("n-need to make an image type of view "); 				//Start to build that				//var test = new interactionViewState(model);							this.changing = new interactionViewState();					this.changing.add(new ImageInteractionViewState(model,true));								//this.changing = new interactionViewState();								this.InteractionViewState = this.changing; 								break;						case "sound": 				////trace("n-need to make an image type of view "); 				//this.changing = new  SoundInteractionViewState(model);				//this.InteractionViewState = this.changing; 								this.changing = new interactionViewState();					this.changing.add(new ImageInteractionViewState(model,false));								this.changing.add(new SoundInteractionViewState(model,true));				//this.changing = new interactionViewState();								this.InteractionViewState = this.changing; 												break;			case "video": 				//trace("n-need to make an video type of view "); 				 								this.changing = new interactionViewState();					this.changing.add(new ImageInteractionViewState(model,false));				this.changing.add(new VideoInteractionViewState(model,true));								this.InteractionViewState = this.changing; 											break;										default:				//trace("hmm some has gone wrong I don't know about that type"); 			} 									this.target.removeChild(this.state); //take the last state off 						this.state = this.InteractionViewState; 			////trace(this.InteractionViewState);			target.addChild(this.InteractionViewState);			//target.addChild(new ImageInteractionViewState(model));					}	}}	