package stem.views {	import flash.display.* 	import stem.model.ScoreModel;	import util.Layout;	public class ScoreView extends MovieClip {					private var ResultsView; 		private var ScoreModel; 		private var layout:Layout = new Layout();					public function ScoreView(m) {		 				ScoreModel = m; 				BuildView();			}				public function upDateScores () 		{						ResultsView.finalscore.text = ScoreModel.getMessageXML.finalscore + " " + ScoreModel.Score; 		}				public function BuildView () 		{			//Make the movie cllp base on a library item - tightly relate to that MovieClip			ResultsView = new ResultsViewLayout(); 			//Add the text to this 			//			trace("the message info from the xml is" + myData.getMessageFinalScore);/						layout.SetPos(ResultsView, ScoreModel.getMessageXML.finalscore); 						ResultsView.finalscore.text = ScoreModel.getMessageXML.finalscore + " " + ScoreModel.Score; 					var nextYpos:Number = ResultsView.finalscore.x + ResultsView.finalscore.height; 													if (ScoreModel.MessageFactorDisplay) 			{				var Factors:XMLList = ScoreModel.Factors; 								var FactorViewResult:Array = new Array(); 								//trace("The lenght of factors is" + Factors.factor.length()); 								//Find the max of the scores as we can scale the bars correctly												var tmpScores:Array = new Array;								for each (var score in ScoreModel.FactorsScores )				{									tmpScores.push(score) 				}								trace(tmpScores); 				tmpScores.sort(Array.NUMERIC); 				var ScoreMax:Number = tmpScores[tmpScores.length - 1]; 								 				trace("The max score is " + ScoreMax); 								for (var i:Number = 0; i <Factors.factor.length(); i++) {												trace("For Factor " + Factors.factor[i] + " the score is " + ScoreModel.FactorsScores[Factors.factor[i]]); 												FactorViewResult[i] = new factorFeedback();						//now get the factor data 												nextYpos += ScoreModel.MessagesPadding;												//trace(nextYpos); 						FactorViewResult[i].y = nextYpos; 						//trace(nextYpos); 						nextYpos += FactorViewResult[i].height; 												//trace(nextYpos); 																	FactorViewResult[i].factorLabel.text = String(Factors.factor[i]); 						FactorViewResult[i].factorScore.text = String(ScoreModel.FactorsScores[Factors.factor[i]]); 												//trace("This score is % of the Max " + (getMyFactorsScores[Factors.factor[i]] / ScoreMax ) * 100);												//Update the factor width of the bar based on the results												trace(ScoreModel.FactorsScores[Factors.factor[i]]);												if (ScoreMax <= 0) {							trace("The width should be " + (FactorViewResult[i].factorBar.width * 0 ));							if((FactorViewResult[i].factorBar.width * 0 ) < 0 ){									FactorViewResult[i].factorBar.width =0							} else {									FactorViewResult[i].factorBar.width = FactorViewResult[i].factorBar.width * 0; 							}						} else {							trace("The width should be " + FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ));									if(FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ) < 0 ){											FactorViewResult[i].factorBar.width =0									} else {										FactorViewResult[i].factorBar.width = FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ); 									}																				}												ResultsView.addChild(FactorViewResult[i]);				}			}			this.addChild(ResultsView) 								}							}}//