package stem.views {		import flash.display.*;	import flash.events.Event;		import stem.model.ResultBoxStyleVO;	import stem.model.ScoreModel;		import util.Layout;
		public class ScoreView extends MovieClip {				private var resultsView:ResultBoxView; 		private var ScoreModel; 		private var layout:Layout = new Layout();				public function ScoreView(m) {						ScoreModel = m; 			if ( stage ) init ();			else addEventListener(Event.ADDED_TO_STAGE, init);					}				private function init ( e:Event = null ):void		{ 			removeEventListener(Event.ADDED_TO_STAGE, init);			BuildView();		}				public function upDateScores () 		{						//resultsView.finalscore.text = ScoreModel.getMessageXML.finalscore + " " + ScoreModel.Score; 					}						[Embed(source="/assets/stem-skin.swf", symbol="ResultsViewLayout")]				private var ResultsViewLayout:Class;				[Embed(source="/assets/stem-skin.swf", symbol="FactorFeedback")]				private var factorFeedback:Class;				public function BuildView () 		{				if ( resultsView && this.contains( resultsView) ) {				this.removeChild( resultsView );				resultsView = null;			}			//Make the movie cllp base on a library item - tightly relate to that MovieClip						//resultsView = new ResultsViewLayout();						var fs:XMLList = ScoreModel.getMessageXML.finalscore;						resultsView = new ResultBoxView(new ResultBoxStyleVO (Number (fs.@background), Number(fs.@alpha), Number(fs.@color)))			//Add the text to this 						//trace("the message info from the xml is" + myData.getMessageFinalScore);/												layout.SetPos(resultsView, ScoreModel.getMessageXML.finalscore); 						resultsView.text = ScoreModel.getMessageXML.finalscore + " " + ScoreModel.Score;						//var nextYpos:Number = ResultsView.finalscore.x + ResultsView.finalscore.height;			var nextYpos:Number = 0;			if (ScoreModel.MessageFactorDisplay) 			{				var Factors:XMLList = ScoreModel.Factors; 								var FactorViewResult:Array = new Array(); 								////trace("The lenght of factors is" + Factors.factor.length()); 								//Find the max of the scores as we can scale the bars correctly								var tmpScores:Array = new Array;				for each ( var score in ScoreModel.FactorsScores ) {										tmpScores.push(score) 				}								//trace(tmpScores); 				tmpScores.sort(Array.NUMERIC); 								var ScoreMax:Number = tmpScores[tmpScores.length - 1];								//trace("The max score is " + ScoreMax); 								for (var i:Number = 0; i <Factors.factor.length(); i++) {										//trace("For Factor " + Factors.factor[i] + " the score is " + ScoreModel.FactorsScores[Factors.factor[i]]); 										FactorViewResult[i] = new factorFeedback();					//now get the factor data 										nextYpos += ScoreModel.MessagesPadding;										////trace(nextYpos); 					FactorViewResult[i].y = nextYpos; 					////trace(nextYpos); 										nextYpos += FactorViewResult[i].height; 										////trace(nextYpos); 															FactorViewResult[i].factorLabel.text = String(Factors.factor[i]); 					FactorViewResult[i].factorScore.text = String(ScoreModel.FactorsScores[Factors.factor[i]]); 										////trace("This score is % of the Max " + (getMyFactorsScores[Factors.factor[i]] / ScoreMax ) * 100);										//Update the factor width of the bar based on the results										//trace(ScoreModel.FactorsScores[Factors.factor[i]]);										if (ScoreMax <= 0) {						//trace("The width should be " + (FactorViewResult[i].factorBar.width * 0 ));						if((FactorViewResult[i].factorBar.width * 0 ) < 0 ){							FactorViewResult[i].factorBar.width =0						} else {							FactorViewResult[i].factorBar.width = FactorViewResult[i].factorBar.width * 0; 						}											} else {						//trace("The width should be " + FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ));						if(FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ) < 0 ){							FactorViewResult[i].factorBar.width =0						} else {							FactorViewResult[i].factorBar.width = FactorViewResult[i].factorBar.width * (ScoreModel.FactorsScores[Factors.factor[i]] / ScoreMax ); 						}																						}					//huh? what are factors?					resultsView.addChild(FactorViewResult[i]);									}			}			this.addChild(resultsView) 					}					}}//