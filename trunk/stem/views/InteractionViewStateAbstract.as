package stem.views { 		import flash.display.*;	import flash.events.*;		import stem.model.*;		import util.*;		/**	* This is 	* @author Robin Petterd	*/		public class InteractionViewStateAbstract extends MovieClip implements ViewStateI  {				//public var myEvents = new myEvents(); 		public var _model:Model; 		public var myEvents = new InteractionEvents(); 		private var _responseView; 	    		private var _scoreView:ScoreView; 		public var layout:Layout = new Layout();		public var helpView; 				public var ReponseControl:Boolean; // so when you have you sound and image it which one is control the interaction can be worked with 				public function setup(m:Model, rc:Boolean):void {						//trace("setting up the Interaction View State");			model = m;			ReponseControl = rc; 			this.load();			buildHelp();						////trace("what is happening with the scroces "  + m.myData.getMessageScoreDisplayDuring);						//Check to see if the score should be displayed during this thing.			if (m.myData.getMessageScoreDisplayDuring) {				TurnONScore(); 			}			//trace ( "WHAT IS model.state :: " , model.state );			model.state.addEventListener(this.myEvents.STATE_READY, this.Ready);			model.state.addEventListener(this.myEvents.STATE_REACT, this.React); 			model.state.addEventListener(this.myEvents.STATE_RESPONDING, this.Respond); 					model.state.addEventListener(this.myEvents.SCORE_DISPLAY,this.DisplayScore); 			model.state.addEventListener(this.myEvents.STATE_REACT,this.UpdateScore); 			} 				public function buildBackground():void 		{		 		 var background = new Background(model.loadManager); 		 background.load(model.myData.getBackground, this);		 		 		}				public function buildHelp():void 		{			//now add the helper view object to this object and make is sure it's on the display liskt			helpView = model.myHelper; 			//trace("The Help viewer is " + helpView); 				  			this.addChild(helpView); 		}													private function UpdateScore(e:Event):void		{			//trace("VVVVVVVVVVVVVVV - should be update the view of thescores VVVVVVVVVVVV"); 			////trace(_scoreView);			if (_scoreView) { 				_scoreView.upDateScores(); //HACKS			}				}				private function removeScoreView():void		{			if (_scoreView && this.contains( _scoreView ) ) { 				trace ( "Removing scoreview" );				this.removeChild (_scoreView);				_scoreView = null;			}		}				private function DisplayScore(e:Event):void		{			removeScoreView();			trace ( "DISPLAY SCORE" );			var scoreView = new ScoreView(model.state.myScore); 			Add(scoreView); 			_scoreView =  scoreView;		}				public function TurnONScore():void		{				removeScoreView();			trace ( "TURNONSCORE" );			var scoreView = new ScoreView(model.state.myScore); 			Add(scoreView);		   _scoreView =  scoreView;		}														public function load():void {} 				/**		 * Simply builds and then calls for the Response list to be added to the 		 * @param	e The event the triggers ths		 */		public function Respond(e:Event) {			//trace (" :: " , model.state.responses);			_responseView = new ResponseView(model.state.responses);			_responseView.init(); 			Add(_responseView);			model.state.responses.addEventListener("killme", killResponse);		}				private function killResponse(e:Event):void		{			_responseView.die(); 			Remove(_responseView);		}				/**		 * Remove a child of this object 		 * 		 * @param	displayBit the object that is going to be removed		 */				 private function Remove(displayBit):void		{			this.removeChild(displayBit); 		}			/**		 * Just a display item such as an MovieClip add it as a child to this. Maybe this should be part of the interface 		 * @param	displayBit		 */		public function Add(displayBit):void {			this.addChild(displayBit); 		}					/** 		 * Handles when the media has been load and send an event back to view about this that 		*/				public function handleLoadedComplete(e:Event):void {}				public function Ready(e:Event):void { }		public function React(e:Event):void {}								public function set model(value:Model):void 		{				_model = value;		}		//TODO convert this object to a Value Object. Object data type is soooo AS1.		public function get model():Model { return _model; }	}	}