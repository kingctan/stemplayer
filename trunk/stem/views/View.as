package stem.views{	import com.sproutlabs.stemplayer.view.controls.PreloaderBar;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.*;		import stem.model.*;
		/**	 * ...	 * @author Robin Petterd	 */	public class View 	{		private var myEvents = new InteractionEvents();				private var model:Model; 		public var target:MovieClip; 				private var display:MovieClip;		//the internal states 		public var buildViewState; 		public var InteractionViewState;				//set the current state 		public var state; 		public var changing;				private var progressBar:PreloaderBar;				/**		 * 		 * @param appModel		 * @param targetStage		 * 		 */				public function View (	appModel:Model, 							  	targetStage:Stage, 							  	targetDisplay:MovieClip = null):void {						model = appModel; 			target = targetDisplay; 			display = targetDisplay;						//Now build each of states 			buildViewState = new BuildViewState(this); 			//update the our first state and then add that to the stage			state = buildViewState; 			target.addChild(state); 						//now for the main Listeners this is partly because the main interaction model is build 			//after the xml is loaded						model.addEventListener(myEvents.MODEL_STATE_CHANGING, changingViewState); 			model.addEventListener(myEvents.MODEL_STATE_CHANGED, changedViewState);			model.loadManager.addEventListener(ProgressEvent.PROGRESS, onLoadProgress );			model.loadManager.addEventListener (Event.COMPLETE, loadedCompleted);		}				private function createProgressBar ():void		{			loadedCompleted();			progressBar = new PreloaderBar();						progressBar.setDimensions( target.stage.stageWidth, 10 );						target.addChild (progressBar);			target.setChildIndex( progressBar, target.numChildren - 1 );			progressBar.x = 0;			progressBar.y = target.stage.stageHeight - progressBar.height;				}		private function onLoadProgress (e:ProgressEvent ):void {						if (!progressBar) {				createProgressBar();			}			progressBar.percentile = (model.loadManager.bytesLoaded / model.loadManager.bytesTotal) * 100;		}				private function loadedCompleted (e:Event = null):void {			trace ("Loading has completed! Hooray!" );			if ( progressBar && target.contains( progressBar ) ) {								target.removeChild (progressBar);				progressBar = null;			}		}				public function changedViewState(e:Event):void 		{			trace("n --- the model has just changed state so the view state needs to change ----"); 		}				private function changingViewState(e:Event):void 		{				var type:String = model.getMyTypeofChanging(); 			trace ( "type :: " , type );			switch(type) {				case "image" : 					//trace("n-need to make an image type of view "); 					//Start to build that					//var test = new interactionViewState(model);											this.changing = new interactionViewState();						this.changing.add(new ImageInteractionViewState(model,true));										//this.changing = new interactionViewState();										this.InteractionViewState = this.changing; 										break;								case "sound": 					////trace("n-need to make an image type of view "); 					//this.changing = new  SoundInteractionViewState(model);					//this.InteractionViewState = this.changing; 										this.changing = new interactionViewState();						this.changing.add(new ImageInteractionViewState(model,false));										this.changing.add(new SoundInteractionViewState(model,true));										//this.changing = new interactionViewState();										this.InteractionViewState = this.changing; 															break;				case "video": 					//trace("n-need to make an video type of view "); 															this.changing = new interactionViewState();						this.changing.add(new ImageInteractionViewState(model,false));					this.changing.add(new VideoInteractionViewState(model,true));										this.InteractionViewState = this.changing; 															break;												default:					//trace("hmm some has gone wrong I don't know about that type");					break;			} 									this.target.removeChild(this.state); //take the last state off 						this.state = this.InteractionViewState; 			////trace(this.InteractionViewState);						target.addChild(this.InteractionViewState);			createProgressBar();			//target.addChild(new ImageInteractionViewState(model));					}	}}